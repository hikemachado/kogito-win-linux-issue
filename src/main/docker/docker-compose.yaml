version: '2.1'

services:

  mongo-express:
    image: mongo-express:0.54.0
    container_name: mongo-express
    ports:
      - 28081:8081
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: root
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
    links:
      - mongo
    # networks:
    #   - mongo-compose-network

  mongo:
    image: mongo
    container_name: mongo
    # environment:
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - "27017:27017"
    volumes:
      - /home/Docker/Volumes/MongoDB:/data/db
    # networks:
    #   - mongo-compose-network


  # infinispan:
  #   image: infinispan/server:12.1.4.Final
  #   container_name: infinispan
  #   ports:
  #       - 11222:11222
  #   command: "/opt/infinispan/bin/server.sh -c infinispan-demo.xml"
  #   volumes:
  #     - ./infinispan.xml:/opt/infinispan/server/conf/infinispan-demo.xml:z
  #   healthcheck:
  #     test: [ "CMD", "curl", "-f", "http://localhost:11222/rest/v2/cache-managers/default/health/status" ]
  #     interval: 1s
  #     timeout: 1s
  #     retries: 50

  zookeeper:
    container_name: zookeeper
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: "/tmp/logs"

  kafka:
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    container_name: kafka
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override inter.broker.listener.name=$${KAFKA_INTER_BROKER_LISTENER_NAME} --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      LOG_DIR: "/tmp/logs"

  # data-index:
  #   container_name: data-index
  #   image: quay.io/kiegroup/kogito-data-index-infinispan:1.9.1
  #   ports:
  #     - "8180:8080"
  #   depends_on:
  #     infinispan:
  #       condition: service_healthy
  #   volumes:
  #     - ./persistence/:/home/kogito/data/protobufs/
  #   environment:
  #     QUARKUS_INFINISPAN_CLIENT_SERVER_LIST: infinispan:11222
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  #     KOGITO_DATA_INDEX_PROPS: -Dkogito.protobuf.folder=/home/kogito/data/protobufs/ -Dquarkus.log.console.level=DEBUG -Dquarkus.log.category.\"org.kie.kogito\".min-level=DEBUG -Dquarkus.log.category.\"org.kie.kogito\".level=DEBUG
  #     QUARKUS_LOG_LEVEL: DEBUG
  #     QUARKUS_LOG_CATEGORY_\"org.kie.kogito\"_MIN-LEVEL: DEBUG

  data-index:
    container_name: data-index
    image: quay.io/kiegroup/kogito-data-index-mongodb:1.12.0
    ports:
      - "8180:8080"
    # depends_on:
    #   mongo:
    #     condition: service_healthy
    volumes:
      - ./persistence/test2:/home/kogito/data/protobufs/
    environment:
      # QUARKUS_MONGODB_CONNECTION-STRING: mongodb://root:root@10.0.0.177:27017/kogito_quarkus
      KOGITO_DATA_INDEX_PROPS: -Dquarkus.mongodb.connection-string=mongodb://mongo:27017 -Dkogito.protobuf.folder=/home/kogito/data/protobufs/
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      QUARKUS_MONGODB_DATABASE: kogito_quarkus
      QUARKUS_LOG_LEVEL: DEBUG
      QUARKUS_LOG_CATEGORY_\"org.kie.kogito\"_MIN-LEVEL: DEBUG

  management-console:
   container_name: management-console
   image: quay.io/kiegroup/kogito-management-console:1.9.1
   ports:
     - 8280:8080
  #  depends_on:
  #    data-index:
  #      condition: service_started
   volumes:
     - ./svg/:/home/kogito/data/svg/
   environment:
     KOGITO_DATAINDEX_HTTP_URL: http://192.168.1.106:8180
     KOGITO_MANAGEMENT_CONSOLE_PROPS: -Dkogito.svg.folder.path=/home/kogito/data/svg -Dkogito.test.user-system.enabled=false

  # task-console:
  #   container_name: task-console
  #   image: quay.io/kiegroup/kogito-task-console:1.9.0
  #   ports:
  #     - 8380:8080
  #   # depends_on:
  #   #   data-index:
  #   #     condition: service_started
  #   environment:
  #     KOGITO_DATAINDEX_HTTP_URL: http://10.0.0.100:8180
  #     KOGITO_TASK_CONSOLE_PROPS: -Dkogito.test.user-system.enabled=true